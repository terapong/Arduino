# Micro-ROS with ESP32 and Buzzer Control via Python

This guide will show you how to set up a Micro-ROS node on an ESP32 to control a buzzer, with commands sent from a Python script.

## Hardware Requirements
- ESP32 development board
- Passive buzzer (or active buzzer with transistor if needed)
- Breadboard and jumper wires
- USB cable for programming and power

## Software Requirements
- Micro-ROS installed on ESP32
- ROS 2 (Humble or Foxy recommended) on your host machine
- Python 3 with rclpy library

## Circuit Setup

Connect the buzzer to your ESP32:
- Buzzer positive to GPIO pin (e.g., GPIO 25)
- Buzzer negative to GND

For passive buzzers, you may need a current-limiting resistor (100-220Î©).

## Micro-ROS ESP32 Setup

1. **Create a Micro-ROS publisher/subscriber node**:

```cpp
#include <micro_ros_arduino.h>
#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/int32.h>

rcl_node_t node;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_subscription_t subscriber;
std_msgs__msg__Int32 msg;

#define BUZZER_PIN 25

void subscription_callback(const void *msgin) {
  const std_msgs__msg__Int32 *msg = (const std_msgs__msg__Int32 *)msgin;
  
  if (msg->data > 0) {
    // Turn on buzzer with frequency (for passive buzzer)
    tone(BUZZER_PIN, msg->data); // msg->data contains frequency
    // For active buzzer: digitalWrite(BUZZER_PIN, HIGH);
  } else {
    // Turn off buzzer
    noTone(BUZZER_PIN);
    // For active buzzer: digitalWrite(BUZZER_PIN, LOW);
  }
}

void setup() {
  pinMode(BUZZER_PIN, OUTPUT);
  
  // Micro-ROS setup
  set_microros_transports();
  allocator = rcl_get_default_allocator();
  rclc_support_init(&support, 0, NULL, &allocator);
  rclc_node_init_default(&node, "esp32_buzzer_node", "", &support);
  
  // Create subscriber
  rclc_subscription_init_default(
    &subscriber,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "buzzer_control");
    
  // Create executor
  rclc_executor_t executor;
  rclc_executor_init(&executor, &support.context, 1, &allocator);
  rclc_executor_add_subscription(&executor, &subscriber, &msg, &subscription_callback, ON_NEW_DATA);
  
  // Spin executor in loop
  while (true) {
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
    delay(100);
  }
}

void loop() {
  // Everything is handled in setup with executor
}
```

## Python Controller Script

Create a Python script to control the buzzer:

```python
#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32

class BuzzerController(Node):
    def __init__(self):
        super().__init__('buzzer_controller')
        self.publisher = self.create_publisher(Int32, 'buzzer_control', 10)
        
    def beep(self, frequency=1000, duration=500):
        msg = Int32()
        msg.data = frequency
        self.publisher.publish(msg)
        self.get_logger().info(f'Beeping at {frequency}Hz')
        
        # Schedule a stop after duration
        self.create_timer(duration / 1000, lambda: self.stop())
        
    def stop(self):
        msg = Int32()
        msg.data = 0
        self.publisher.publish(msg)
        self.get_logger().info('Buzzer stopped')

def main(args=None):
    rclpy.init(args=args)
    controller = BuzzerController()
    
    try:
        # Example: beep at 1kHz for 0.5 seconds
        controller.beep(1000, 500)
        
        # Keep the node alive
        rclpy.spin(controller)
    except KeyboardInterrupt:
        controller.stop()
    finally:
        controller.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
```

## Usage

1. Flash the Micro-ROS firmware to your ESP32
2. Connect the ESP32 to your ROS 2 network
3. Run the Micro-ROS agent on your host machine:
   ```
   ros2 run micro_ros_agent micro_ros_agent serial --dev [PORT] -v6
   ```
4. Run the Python controller script:
   ```
   python3 buzzer_controller.py
   ```

## Advanced Features

1. **Pattern playing**:
```python
def play_pattern(self, pattern):
    for note in pattern:
        self.beep(note['frequency'], note['duration'])
        time.sleep(note['pause'] / 1000)
```

2. **Volume control** (PWM for active buzzers):
```cpp
// In your subscription callback
analogWrite(BUZZER_PIN, map(msg->data, 0, 100, 0, 255));
```

3. **Multiple buzzers**:
```cpp
#define BUZZER_PIN_1 25
#define BUZZER_PIN_2 26
// Create separate topics/subscribers for each buzzer
```

Remember to adjust the code based on whether you're using an active or passive buzzer, as they require different control methods.
