# Frequency Analysis with ESP32

The ESP32 microcontroller is capable of performing frequency analysis on signals using its built-in peripherals and processing capabilities. Here's an overview of approaches for frequency analysis with ESP32:

## Hardware Options

1. **ADC Sampling**:
   - Use the built-in ADC to sample analog signals (up to ~2MHz sampling rate)
   - 12-bit resolution (but effective number of bits is typically lower)
   - Can sample at up to ~20kHz for reasonable quality audio analysis

2. **I2S Peripheral**:
   - Better for audio applications
   - Supports up to 192kHz sample rate (depending on configuration)
   - Can interface with external ADC for higher quality

3. **Dedicated Hardware**:
   - ESP32 has a hardware FFT accelerator (in some variants)
   - Pulse Counter (PCNT) for simple frequency counting

## Software Approaches

### 1. FFT (Fast Fourier Transform)
```cpp
// Example using Arduino FFT library
#include "arduinoFFT.h"

arduinoFFT FFT = arduinoFFT();

#define SAMPLES 512             // Must be power of 2
#define SAMPLING_FREQUENCY 10000 // Hz

double vReal[SAMPLES];
double vImag[SAMPLES];

void setup() {
  Serial.begin(115200);
  // Configure ADC or I2S for sampling here
}

void loop() {
  // Sample your signal into vReal array
  for(int i=0; i<SAMPLES; i++) {
    vReal[i] = analogRead(34); // Example using ADC1 channel 6
    vImag[i] = 0;
    delayMicroseconds(1000000/SAMPLING_FREQUENCY);
  }
  
  FFT.Windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
  FFT.Compute(vReal, vImag, SAMPLES, FFT_FORWARD);
  FFT.ComplexToMagnitude(vReal, vImag, SAMPLES);
  
  // Print frequency peaks
  double peak = FFT.MajorPeak(vReal, SAMPLES, SAMPLING_FREQUENCY);
  Serial.print("Dominant frequency: ");
  Serial.println(peak);
}
```

### 2. Zero-Crossing Detection (for simple frequency measurement)
```cpp
#define INPUT_PIN 34

void setup() {
  Serial.begin(115200);
  pinMode(INPUT_PIN, INPUT);
}

void loop() {
  unsigned long startTime = micros();
  int crossings = 0;
  
  for(int i=0; i<100; i++) { // Count 100 crossings
    while(digitalRead(INPUT_PIN) == HIGH); // Wait for LOW
    while(digitalRead(INPUT_PIN) == LOW);  // Wait for HIGH
    crossings++;
  }
  
  unsigned long duration = micros() - startTime;
  float frequency = (1000000.0 * crossings) / (2 * duration);
  
  Serial.print("Frequency: ");
  Serial.print(frequency);
  Serial.println(" Hz");
}
```

## Optimizations for ESP32

1. **Use Dual Core**:
   - Run sampling on one core and processing on the other

2. **DMA Transfers**:
   - Use Direct Memory Access for efficient data transfer

3. **Fixed-point Math**:
   - For faster FFT calculations, use fixed-point instead of floating-point

4. **ESP-DSP Library**:
   - Espressif's optimized DSP library with FFT functions

## Applications

- Audio spectrum analysis
- Vibration monitoring
- Power line frequency monitoring
- RF signal analysis (with appropriate front-end)
- Musical instrument tuner

## Limitations

- ADC noise floor limits low-level signal analysis
- Sampling rate limits maximum detectable frequency (Nyquist theorem)
- Processing power limits real-time analysis of complex signals

Would you like more specific information about any particular aspect of frequency analysis with ESP32?
