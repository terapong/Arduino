# Micro-ROS with ESP32 and Water Sensor

This guide will show you how to set up a water level monitoring system using Micro-ROS on an ESP32 with a water sensor, including both C++ (for the ESP32) and Python (for the ROS2 host) components.

## Hardware Components
- ESP32 board (e.g., ESP32 DevKit)
- Water level sensor (e.g., capacitive or ultrasonic sensor)
- Breadboard and jumper wires

## Part 1: ESP32 Micro-ROS C++ Code

### 1. Install Required Libraries
- Install Micro-ROS for ESP32 (follow official instructions)
- Install appropriate sensor library for your water sensor

### 2. C++ Code for ESP32

```cpp
#include <micro_ros_arduino.h>
#include <stdio.h>
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/int32.h>

// Water sensor pin (adjust based on your setup)
#define WATER_SENSOR_PIN 34

rcl_publisher_t publisher;
std_msgs__msg__Int32 water_level_msg;
rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_timer_t timer;

#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){}}

void error_loop(){
  while(1){
    delay(100);
  }
}

void timer_callback(rcl_timer_t * timer, int64_t last_call_time) {
  RCLC_UNUSED(last_call_time);
  if (timer != NULL) {
    // Read water level from sensor
    int water_level = analogRead(WATER_SENSOR_PIN);
    
    // Map the value if needed (depends on your sensor)
    // water_level = map(water_level, 0, 4095, 0, 100); // Example for percentage
    
    water_level_msg.data = water_level;
    RCSOFTCHECK(rcl_publish(&publisher, &water_level_msg, NULL));
  }
}

void setup() {
  // Initialize water sensor
  pinMode(WATER_SENSOR_PIN, INPUT);
  
  // Configure serial transport
  set_microros_transports();
  
  delay(2000);

  allocator = rcl_get_default_allocator();

  // Create init_options
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));

  // Create node
  RCCHECK(rclc_node_init_default(&node, "esp32_water_sensor", "", &support));

  // Create publisher
  RCCHECK(rclc_publisher_init_default(
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "water_level"));

  // Create timer
  const unsigned int timer_timeout = 1000;
  RCCHECK(rclc_timer_init_default(
    &timer,
    &support,
    RCL_MS_TO_NS(timer_timeout),
    timer_callback));

  // Create executor
  RCCHECK(rclc_executor_init(&executor, &support.context, 1, &allocator));
  RCCHECK(rclc_executor_add_timer(&executor, &timer));
}

void loop() {
  delay(100);
  RCSOFTCHECK(rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100)));
}
```

## Part 2: Python ROS2 Node for Data Processing

### 1. Prerequisites
- ROS2 (Foxy or Humble recommended)
- rclpy package

### 2. Python Code for ROS2 Host

```python
#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32

class WaterLevelSubscriber(Node):
    def __init__(self):
        super().__init__('water_level_processor')
        self.subscription = self.create_subscription(
            Int32,
            'water_level',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning
        
        # For storing historical data
        self.water_level_history = []
        self.max_history = 100
        
        # Threshold for alerts (adjust based on your needs)
        self.alert_threshold = 700  # Example value

    def listener_callback(self, msg):
        water_level = msg.data
        self.get_logger().info(f'Current water level: {water_level}')
        
        # Store in history
        self.water_level_history.append(water_level)
        if len(self.water_level_history) > self.max_history:
            self.water_level_history.pop(0)
            
        # Check for alerts
        if water_level > self.alert_threshold:
            self.get_logger().warn(f'ALERT: High water level detected! ({water_level})')
            
        # Here you could add more processing:
        # - Calculate average
        # - Detect trends
        # - Save to database
        # - Trigger actions

def main(args=None):
    rclpy.init(args=args)
    water_level_subscriber = WaterLevelSubscriber()
    rclpy.spin(water_level_subscriber)
    
    # Destroy the node explicitly
    water_level_subscriber.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
```

## Setup Instructions

1. **Flash the ESP32** with the C++ code after setting up Micro-ROS
2. **Connect the water sensor** to your ESP32:
   - For analog sensors: Connect to an analog pin (e.g., GPIO34)
   - For digital sensors: Connect to appropriate digital pin
3. **Connect ESP32 to your ROS2 network** via serial or WiFi
4. **Run the Micro-ROS agent** on your host machine:
   ```
   ros2 run micro_ros_agent micro_ros_agent serial --dev [YOUR_DEVICE] baudrate=115200
   ```
5. **Run the Python node**:
   ```
   python3 water_level_processor.py
   ```

## Advanced Enhancements

1. **Add calibration** to your C++ code for more accurate readings
2. **Implement a service** in the Python node to change the alert threshold dynamically
3. **Add visualization** using RViz or a web dashboard
4. **Implement water leak detection** by analyzing rapid level changes
5. **Add battery monitoring** if using a battery-powered setup

Remember to adjust the pin numbers, message types, and thresholds based on your specific hardware and requirements.
