# Micro-ROS on ESP32: Controlling an RGB LED with Python

This guide will show you how to control an RGB LED connected to an ESP32 using Micro-ROS and Python.

## Hardware Setup

### Components Needed:
- ESP32 development board
- RGB LED (common cathode or anode)
- 3 resistors (220Î© recommended)
- Breadboard and jumper wires

### Wiring:
For a common cathode RGB LED:
- Connect the cathode to GND
- Connect red anode to ESP32 GPIO (e.g., GPIO25) through resistor
- Connect green anode to ESP32 GPIO (e.g., GPIO26) through resistor
- Connect blue anode to ESP32 GPIO (e.g., GPIO27) through resistor

## Micro-ROS Setup on ESP32

1. First, install the Micro-ROS Arduino library in your Arduino IDE.

2. Here's a basic Micro-ROS sketch for controlling an RGB LED:

```cpp
#include <micro_ros_arduino.h>
#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/color_rgba.h>

rcl_node_t node;
rcl_subscription_t subscriber;
rclc_executor_t executor;
std_msgs__msg__ColorRGBA led_color;

#define LED_RED 25
#define LED_GREEN 26
#define LED_BLUE 27

void subscription_callback(const void *msgin) {
  const std_msgs__msg__ColorRGBA *msg = (const std_msgs__msg__ColorRGBA *)msgin;
  
  // Set LED colors (PWM for smooth transitions)
  analogWrite(LED_RED, (int)(msg->r * 255));
  analogWrite(LED_GREEN, (int)(msg->g * 255));
  analogWrite(LED_BLUE, (int)(msg->b * 255));
}

void setup() {
  // Initialize PWM pins
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_BLUE, OUTPUT);
  
  // Set initial color (off)
  analogWrite(LED_RED, 0);
  analogWrite(LED_GREEN, 0);
  analogWrite(LED_BLUE, 0);

  // Micro-ROS setup
  set_microros_transports();
  
  delay(2000);
  
  rcl_allocator_t allocator = rcl_get_default_allocator();
  rclc_support_t support;
  
  // Create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
  
  // Create node
  rclc_node_init_default(&node, "esp32_led_controller", "", &support);
  
  // Create subscriber
  rclc_subscription_init_default(
    &subscriber,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, ColorRGBA),
    "led_color");
  
  // Create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
  rclc_executor_add_subscription(&executor, &subscriber, &led_color, &subscription_callback, ON_NEW_DATA);
}

void loop() {
  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
  delay(100);
}
```

## Python Control Script

Here's a Python script to control the LED from your computer:

```python
#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import ColorRGBA

class LEDController(Node):
    def __init__(self):
        super().__init__('led_controller')
        self.publisher = self.create_publisher(ColorRGBA, 'led_color', 10)
        
    def set_color(self, r, g, b, a=1.0):
        msg = ColorRGBA()
        msg.r = float(r)
        msg.g = float(g)
        msg.b = float(b)
        msg.a = float(a)
        self.publisher.publish(msg)
        self.get_logger().info(f'Setting color: R={r}, G={g}, B={b}')

def main(args=None):
    rclpy.init(args=args)
    controller = LEDController()
    
    try:
        while True:
            # Get user input
            print("\nEnter RGB values (0-1) separated by spaces, or 'q' to quit:")
            user_input = input("> ")
            
            if user_input.lower() == 'q':
                break
                
            try:
                r, g, b = map(float, user_input.split())
                # Validate input
                if all(0 <= x <= 1 for x in (r, g, b)):
                    controller.set_color(r, g, b)
                else:
                    print("Values must be between 0 and 1")
            except ValueError:
                print("Invalid input. Please enter three numbers separated by spaces.")
                
    except KeyboardInterrupt:
        pass
        
    controller.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
```

## How to Use

1. Flash the Micro-ROS sketch to your ESP32
2. Make sure your Micro-ROS agent is running on your computer
3. Run the Python script: `python3 led_controller.py`
4. Enter RGB values when prompted (e.g., "1 0 0" for red, "0 1 0" for green, etc.)

## Advanced Features

You could extend this to:
- Add color fading transitions
- Implement predefined color patterns
- Add brightness control
- Create a GUI interface with sliders for each color channel

Remember to adjust the GPIO pins in the Arduino sketch to match your actual wiring.




////////////////////
In Python, you can create an **RGB color selector** using libraries like `tkinter`, `PyQt`, or `matplotlib`. Below are examples for each:

---

### **1. Simple RGB Color Selector with Tkinter**  
`tkinter` is Python's built-in GUI library and works on all platforms.

```python
import tkinter as tk
from tkinter import colorchooser

def select_color():
    color = colorchooser.askcolor(title="Choose a Color")
    if color[1]:  # If a color is selected (not canceled)
        rgb, hex_code = color
        print(f"RGB: {rgb}\nHex: {hex_code}")

root = tk.Tk()
button = tk.Button(root, text="Select Color", command=select_color)
button.pack(pady=20)
root.mainloop()
```
**Output:**  
A popup color picker appears, and the selected RGB & hex values are printed.

---

### **2. Custom RGB Sliders with Tkinter**  
For more control, create sliders for each RGB channel:

```python
import tkinter as tk

def update_color():
    r = red_slider.get()
    g = green_slider.get()
    b = blue_slider.get()
    color_hex = f"#{r:02x}{g:02x}{b:02x}"
    color_display.config(bg=color_hex)
    rgb_label.config(text=f"RGB: ({r}, {g}, {b})\nHex: {color_hex}")

root = tk.Tk()
root.title("RGB Color Selector")

# Sliders for R, G, B (0-255)
red_slider = tk.Scale(root, from_=0, to=255, label="Red", command=lambda _: update_color())
green_slider = tk.Scale(root, from_=0, to=255, label="Green", command=lambda _: update_color())
blue_slider = tk.Scale(root, from_=0, to=255, label="Blue", command=lambda _: update_color())

red_slider.pack()
green_slider.pack()
blue_slider.pack()

# Display selected color
color_display = tk.Label(root, width=20, height=10, bg="#000000")
color_display.pack(pady=10)

rgb_label = tk.Label(root, text="RGB: (0, 0, 0)\nHex: #000000")
rgb_label.pack()

root.mainloop()
```
**Output:**  
A window with sliders to adjust RGB values and a live preview.

---

### **3. RGB Color Picker with PyQt (Modern UI)**  
For a more polished interface, use `PyQt6`:

```python
from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel, QColorDialog
from PyQt6.QtGui import QColor

def select_color():
    color = QColorDialog.getColor()
    if color.isValid():
        rgb = (color.red(), color.green(), color.blue())
        hex_code = color.name()
        label.setText(f"RGB: {rgb}\nHex: {hex_code}")

app = QApplication([])
window = QWidget()
layout = QVBoxLayout()

button = QPushButton("Select Color")
button.clicked.connect(select_color)
label = QLabel("RGB: (0, 0, 0)\nHex: #000000")

layout.addWidget(button)
layout.addWidget(label)
window.setLayout(layout)
window.show()
app.exec()
```
**Output:**  
A native system color picker dialog with RGB and hex output.

---

### **4. Matplotlib Interactive Color Picker**  
For data visualization applications:

```python
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

def update(val):
    r = slider_r.val
    g = slider_g.val
    b = slider_b.val
    color = (r/255, g/255, b/255)
    ax.set_facecolor(color)
    fig.canvas.draw_idle()

fig, ax = plt.subplots()
plt.subplots_adjust(bottom=0.3)

ax_r = plt.axes([0.1, 0.2, 0.8, 0.03])
ax_g = plt.axes([0.1, 0.15, 0.8, 0.03])
ax_b = plt.axes([0.1, 0.1, 0.8, 0.03])

slider_r = Slider(ax_r, 'Red', 0, 255, valinit=0)
slider_g = Slider(ax_g, 'Green', 0, 255, valinit=0)
slider_b = Slider(ax_b, 'Blue', 0, 255, valinit=0)

slider_r.on_changed(update)
slider_g.on_changed(update)
slider_b.on_changed(update)

plt.show()
```
**Output:**  
A plot with RGB sliders that change the background color.

---

### **Which One Should You Use?**
- **`tkinter`**: Quick and built-in (no extra installs).
- **`PyQt`**: More professional and feature-rich.
- **`matplotlib`**: Best for scientific/data apps.

Let me know if you'd like a specific variation! ðŸš€



