# Micro-ROS on ESP32 with Potentiometer: Arduino and Python Setup

This guide will help you set up a Micro-ROS node on an ESP32 that reads a potentiometer value and publishes it to a ROS 2 topic, which can then be read by a Python subscriber.

## Hardware Requirements
- ESP32 board (e.g., ESP32 DevKit)
- Potentiometer (10kÎ© recommended)
- Breadboard and jumper wires
- USB cable for programming and power

## Circuit Setup
1. Connect one outer pin of the potentiometer to 3.3V on ESP32
2. Connect the other outer pin to GND on ESP32
3. Connect the middle pin (wiper) to an analog input pin (e.g., GPIO34)

## Arduino Setup (Micro-ROS Publisher)

### 1. Install Prerequisites
- Install Arduino IDE
- Install ESP32 board support in Arduino IDE
- Install Micro-ROS library for Arduino

### 2. Arduino Code
```cpp
#include <micro_ros_arduino.h>
#include <stdio.h>
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/int32.h>

// Configuration
const int POTENTIOMETER_PIN = 34;  // GPIO34 is ADC1_CH6
const int PUBLISH_DELAY_MS = 100;  // 10Hz update rate

// Micro-ROS objects
rcl_publisher_t publisher;
std_msgs__msg__Int32 pot_msg;
rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_timer_t timer;

// Timer callback - reads potentiometer and publishes value
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
  (void)last_call_time;
  if (timer != NULL) {
    // Read potentiometer (0-4095 for ESP32 ADC)
    pot_msg.data = analogRead(POTENTIOMETER_PIN);
    
    // Publish the value
    rcl_publish(&publisher, &pot_msg, NULL);
  }
}

void setup() {
  // Initialize serial
  Serial.begin(115200);
  
  // Configure potentiometer pin
  pinMode(POTENTIOMETER_PIN, INPUT);
  
  // Set up Micro-ROS
  set_microros_transports();
  
  delay(2000);
  
  allocator = rcl_get_default_allocator();
  
  // Initialize support
  rclc_support_init(&support, 0, NULL, &allocator);
  
  // Create node
  rclc_node_init_default(&node, "esp32_potentiometer", "", &support);
  
  // Create publisher
  rclc_publisher_init_default(
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "potentiometer_value");
  
  // Create timer
  rclc_timer_init_default(
    &timer,
    &support,
    RCL_MS_TO_NS(PUBLISH_DELAY_MS),
    timer_callback);
  
  // Create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
  rclc_executor_add_timer(&executor, &timer);
}

void loop() {
  delay(100);
  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
}
```

## Python Setup (ROS 2 Subscriber)

### 1. Prerequisites
- Install ROS 2 (Foxy or Humble recommended)
- Set up your ROS 2 workspace

### 2. Python Subscriber Code
Create a file `potentiometer_subscriber.py`:

```python
#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32

class PotentiometerSubscriber(Node):
    def __init__(self):
        super().__init__('potentiometer_subscriber')
        self.subscription = self.create_subscription(
            Int32,
            'potentiometer_value',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        # Convert ADC value to voltage (assuming 3.3V reference and 12-bit ADC)
        voltage = (msg.data / 4095) * 3.3
        self.get_logger().info(f'Potentiometer value: {msg.data} (Voltage: {voltage:.2f}V)')

def main(args=None):
    rclpy.init(args=args)
    potentiometer_subscriber = PotentiometerSubscriber()
    rclpy.spin(potentiometer_subscriber)
    
    # Destroy the node explicitly
    potentiometer_subscriber.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
```

## Running the System

1. **Flash the ESP32** with the Arduino code
2. **Connect the ESP32 to your ROS 2 network** (either directly or via a Micro-ROS agent)
3. **Run the Micro-ROS agent** on your computer:
   ```bash
   ros2 run micro_ros_agent micro_ros_agent serial --dev [YOUR_DEVICE] baudrate=115200
   ```
   Replace `[YOUR_DEVICE]` with the serial port (e.g., `/dev/ttyUSB0` on Linux)

4. **Run the Python subscriber**:
   ```bash
   python3 potentiometer_subscriber.py
   ```

## Troubleshooting

- If you don't see any messages, check the Micro-ROS agent connection
- Make sure the potentiometer is properly connected to the correct pins
- Verify the ESP32 has enough power (some boards need external power for stable ADC readings)
- Check the topic name matches between publisher and subscriber

This setup provides a foundation that you can extend with more sensors or actuators as needed.
